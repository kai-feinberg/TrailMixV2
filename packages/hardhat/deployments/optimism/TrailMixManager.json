{
  "address": "0x03304Dd5bE74008E6fF36188932d522E4Cd6e8e6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotContractOwner",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "trailAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ContractDeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "trailAmount",
          "type": "uint256"
        }
      ],
      "name": "FundsDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "trailAmount",
          "type": "uint256"
        }
      ],
      "name": "FundsWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "SwapExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ThresholdUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "activeStrategies",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canExec",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "execPayload",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stablecoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapOracle",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_trailAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_granularity",
          "type": "uint256"
        },
        {
          "internalType": "uint24",
          "name": "_poolFee",
          "type": "uint24"
        }
      ],
      "name": "deployTrailMix",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tslThreshold",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserContracts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isActiveStrategy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "sell",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "updateThreshold",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "newThreshold",
          "type": "uint256"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "setGelatoExecutor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "toggleSlippageProtection",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userContracts",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8ad96a6238f2e1a664120e7f3113641d6103429d66a213a9434df08fbd037a0d",
  "receipt": {
    "to": null,
    "from": "0x2cb509BE01144aF14FCF944957c401C14c6dF722",
    "contractAddress": "0x03304Dd5bE74008E6fF36188932d522E4Cd6e8e6",
    "transactionIndex": 13,
    "gasUsed": "2849796",
    "logsBloom": "0x
    "blockHash": "0xa6780177b339c981520d16dfddb7e34967462b33fbf8c4dbc8e317535c63f491",
    "transactionHash": "0x8ad96a6238f2e1a664120e7f3113641d6103429d66a213a9434df08fbd037a0d",
    "logs": [],
    "blockNumber": 122731186,
    "cumulativeGasUsed": "21728061",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 10,
  "solcInputHash": "a8dffc73d66e6de23a689d3da1e0bd0f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trailAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ContractDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trailAmount\",\"type\":\"uint256\"}],\"name\":\"FundsDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"trailAmount\",\"type\":\"uint256\"}],\"name\":\"FundsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SwapExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ThresholdUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeStrategies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canExec\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"execPayload\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stablecoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_trailAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_granularity\",\"type\":\"uint256\"},{\"internalType\":\"uint24\",\"name\":\"_poolFee\",\"type\":\"uint24\"}],\"name\":\"deployTrailMix\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tslThreshold\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isActiveStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"sell\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"updateThreshold\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"newThreshold\",\"type\":\"uint256\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"setGelatoExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"toggleSlippageProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checker()\":{\"details\":\"Part of the Gelato automation\",\"returns\":{\"canExec\":\"Boolean flag indicating if upkeep is needed.\",\"execPayload\":\"Encoded data on what action to perform during upkeep.\"}},\"performUpkeep(address,bool,bool,uint256)\":{\"details\":\"Part of the gelato automation.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checker()\":{\"notice\":\"Checks if upkeep is needed based on TSL conditions.COMPUTED OFF-CHAIN\"},\"performUpkeep(address,bool,bool,uint256)\":{\"notice\":\"Performs the upkeep of updating the stop loss threshold or triggering a sell.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TrailMixManager.sol\":\"TrailMixManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/IERC20withDecimals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// FORK OF OPPENZEPPLIN IERC20 CONTRACT WITH THE ADDED DECIMALS FUNCTION\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20withDecimals {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\r\\n     * caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 value) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `value` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\r\\n\\r\\n\\r\\n    function decimals() external view returns (uint8);\\r\\n     \\r\\n}\",\"keccak256\":\"0xaf9879407dd3f6eb01c8a44aa7181a6eb7806681943158ef33d767889cc04394\",\"license\":\"MIT\"},\"contracts/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.7.5;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\\\";\\r\\n\\r\\n/// @title Router token swapping functionality\\r\\n/// @notice Functions for swapping tokens via Uniswap V3\\r\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\r\\n\\tstruct ExactInputSingleParams {\\r\\n\\t\\taddress tokenIn;\\r\\n\\t\\taddress tokenOut;\\r\\n\\t\\tuint24 fee;\\r\\n\\t\\taddress recipient;\\r\\n\\t\\tuint256 amountIn;\\r\\n\\t\\tuint256 amountOutMinimum;\\r\\n\\t\\tuint160 sqrtPriceLimitX96;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n\\t/// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n\\t/// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n\\t/// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n\\t/// @return amountOut The amount of the received token\\r\\n\\tfunction exactInputSingle(\\r\\n\\t\\tExactInputSingleParams calldata params\\r\\n\\t) external payable returns (uint256 amountOut);\\r\\n\\r\\n\\tstruct ExactInputParams {\\r\\n\\t\\tbytes path;\\r\\n\\t\\taddress recipient;\\r\\n\\t\\tuint256 amountIn;\\r\\n\\t\\tuint256 amountOutMinimum;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n\\t/// @dev Setting `amountIn` to 0 will cause the contract to look up its own balance,\\r\\n\\t/// and swap the entire amount, enabling contracts to send tokens before calling this function.\\r\\n\\t/// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n\\t/// @return amountOut The amount of the received token\\r\\n\\tfunction exactInput(\\r\\n\\t\\tExactInputParams calldata params\\r\\n\\t) external payable returns (uint256 amountOut);\\r\\n\\r\\n\\tstruct ExactOutputSingleParams {\\r\\n\\t\\taddress tokenIn;\\r\\n\\t\\taddress tokenOut;\\r\\n\\t\\tuint24 fee;\\r\\n\\t\\taddress recipient;\\r\\n\\t\\tuint256 amountOut;\\r\\n\\t\\tuint256 amountInMaximum;\\r\\n\\t\\tuint160 sqrtPriceLimitX96;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n\\t/// that may remain in the router after the swap.\\r\\n\\t/// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n\\t/// @return amountIn The amount of the input token\\r\\n\\tfunction exactOutputSingle(\\r\\n\\t\\tExactOutputSingleParams calldata params\\r\\n\\t) external payable returns (uint256 amountIn);\\r\\n\\r\\n\\tstruct ExactOutputParams {\\r\\n\\t\\tbytes path;\\r\\n\\t\\taddress recipient;\\r\\n\\t\\tuint256 amountOut;\\r\\n\\t\\tuint256 amountInMaximum;\\r\\n\\t}\\r\\n\\r\\n\\t/// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\r\\n\\t/// that may remain in the router after the swap.\\r\\n\\t/// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\r\\n\\t/// @return amountIn The amount of the input token\\r\\n\\tfunction exactOutput(\\r\\n\\t\\tExactOutputParams calldata params\\r\\n\\t) external payable returns (uint256 amountIn);\\r\\n}\\r\\n\",\"keccak256\":\"0x17f6d1b003f295222e9e302d8e2a075194ddece67f4dfc0d4d56124417149abc\",\"license\":\"GPL-2.0-or-later\"},\"contracts/ITrailMix.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\ninterface ITrailMix {\\r\\n\\t// Function signatures\\r\\n\\tfunction deposit(uint256 amount, uint256 tslThreshold) external;\\r\\n\\r\\n\\tfunction withdraw(address token) external;\\r\\n\\r\\n\\tfunction checkUpkeepNeeded() external view returns (bool, bool, uint256);\\r\\n\\r\\n\\tfunction updateTSLThreshold(uint256 newThreshold) external;\\r\\n\\r\\n\\tfunction swapOnUniswap(uint256 amount) external;\\r\\n\\r\\n\\tfunction getTwapPrice() external view returns (uint256);\\r\\n\\r\\n\\tfunction getExactPrice() external view returns (uint256);\\r\\n\\r\\n\\tfunction toggleSlippageProtection() external;\\r\\n\\r\\n\\tfunction getERC20Balance() external view returns (uint256);\\r\\n\\r\\n\\tfunction getStablecoinBalance() external view returns (uint256);\\r\\n\\r\\n\\tfunction getTSLThreshold() external view returns (uint256);\\r\\n\\r\\n\\tfunction isTSLActive() external view returns (bool);\\r\\n\\r\\n\\tfunction getERC20TokenAddress() external view returns (address);\\r\\n\\r\\n\\tfunction getStablecoinAddress() external view returns (address);\\r\\n\\r\\n\\tfunction getUniswapRouterAddress() external view returns (address);\\r\\n\\r\\n\\tfunction getTrailAmount() external view returns (uint256);\\r\\n\\r\\n\\tfunction getManager() external view returns (address);\\r\\n\\r\\n\\tfunction getCreator() external view returns (address);\\r\\n\\r\\n\\tfunction getGranularity() external view returns (uint256);\\r\\n\\r\\n\\tfunction getUniswapPool() external view returns (address);\\r\\n\\t\\r\\n\\tfunction getProfit() external view returns (int256);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x79a1a2869eb4bbc0d64c705970eec58e8cf44c7c7313d781ba14bd74a8c00334\",\"license\":\"MIT\"},\"contracts/IUniswapOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\ninterface IUniswapOracle {\\r\\n    function estimateAmountOut(\\r\\n        address pool,\\r\\n        address tokenIn,\\r\\n        uint128 amountIn,\\r\\n        uint32 secondsAgo\\r\\n    ) external view returns (uint amountOut);\\r\\n}\\r\\n\",\"keccak256\":\"0x5017001026dd46165966a19ca1f9fa3e2d3c9380dcaef6a967b64405600a32cb\",\"license\":\"MIT\"},\"contracts/TrailMix.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport \\\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\\\";\\r\\nimport { ISwapRouter } from \\\"./ISwapRouter.sol\\\";\\r\\nimport { IERC20withDecimals } from \\\"./IERC20withDecimals.sol\\\";\\r\\n\\r\\n// import {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport { IUniswapOracle } from \\\"./IUniswapOracle.sol\\\";\\r\\n\\r\\nerror InvalidAmount(); // Error for when the deposit amount is not positive\\r\\nerror TransferFailed(); // Error for when the token transfer fails\\r\\nerror InvalidToken(); // Error for when the token address is invalid\\r\\nerror StrategyNotActive();\\r\\n\\r\\n//events are emitted in the manager contract\\r\\ncontract TrailMix is ReentrancyGuard {\\r\\n\\taddress private immutable i_manager; //address of the manager contract\\r\\n\\taddress private immutable i_creator; // address of the creator of the contract\\r\\n\\r\\n\\taddress private s_erc20Token;\\r\\n\\taddress private s_stablecoin;\\r\\n\\r\\n\\tISwapRouter private s_uniswapRouter;\\r\\n\\taddress public immutable s_uniswapPool;\\r\\n\\tIUniswapOracle private s_uniswapOracle; // TWAP oracle for Uniswap V3\\r\\n\\r\\n\\tuint256 private immutable s_trailAmount; // Amount to trail by as a %\\r\\n\\tuint256 private s_tslThreshold; // User's TSL threshold\\r\\n\\tuint256 private s_erc20Balance;\\r\\n\\tuint256 private s_stablecoinBalance; // User's ERC20 token balance\\r\\n\\tuint256 private s_granularity; //  % price increase to trigger an update\\r\\n\\tbool private slippageProtection; // Indicates if slippage protection is enabled\\r\\n\\tuint24 private s_poolFee;\\r\\n\\r\\n\\t//USED FOR PROFIT TRACKING\\r\\n\\tuint256 private s_weightedEntryPrice;\\r\\n\\tuint256 private s_totalDeposited; // Total amount deposited in ERC20\\r\\n\\tuint256 private s_exitPrice;\\r\\n\\tuint8 private s_stablecoinDecimals; //number of decimals the stablecoin has\\r\\n\\tuint8 private s_erc20TokenDecimals;\\r\\n\\r\\n\\t//stores current state of contract\\r\\n\\tenum ContractState {\\r\\n\\t\\tUninitialized,\\r\\n\\t\\tActive,\\r\\n\\t\\tClaimable,\\r\\n\\t\\tInactive\\r\\n\\t}\\r\\n\\tContractState private state;\\r\\n\\r\\n\\tconstructor(\\r\\n\\t\\taddress _manager,\\r\\n\\t\\taddress _creator,\\r\\n\\t\\taddress _erc20Token,\\r\\n\\t\\taddress _stablecoin,\\r\\n\\t\\taddress _uniswapRouter,\\r\\n\\t\\taddress _uniswapPool,\\r\\n\\t\\taddress _uniswapOracle,\\r\\n\\t\\tuint256 _trailAmount,\\r\\n\\t\\tuint256 granularity,\\r\\n\\t\\tuint24 _poolFee\\r\\n\\t) {\\r\\n\\t\\ti_manager = _manager;\\r\\n\\t\\ti_creator = _creator;\\r\\n\\r\\n\\t\\ts_erc20Token = _erc20Token;\\r\\n\\t\\ts_stablecoin = _stablecoin;\\r\\n\\r\\n\\t\\ts_uniswapRouter = ISwapRouter(_uniswapRouter);\\r\\n\\t\\ts_uniswapOracle = IUniswapOracle(_uniswapOracle);\\r\\n\\t\\ts_uniswapPool = _uniswapPool;\\r\\n\\r\\n\\t\\ts_trailAmount = _trailAmount;\\r\\n\\t\\tslippageProtection = true;\\r\\n\\t\\ts_granularity = granularity;\\r\\n\\t\\ts_poolFee = _poolFee;\\r\\n\\t\\tstate = ContractState.Uninitialized;\\r\\n\\t\\ts_stablecoinDecimals = IERC20withDecimals(_stablecoin).decimals();\\r\\n\\t\\ts_erc20TokenDecimals = IERC20withDecimals(_erc20Token).decimals();\\r\\n\\t}\\r\\n\\r\\n\\tmodifier onlyManager() {\\r\\n\\t\\trequire(msg.sender == i_manager, \\\"only callable by manager contract\\\");\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Deposits a specified amount of the ERC20 token into the contract.\\r\\n\\t * @param amount The amount of the ERC20 token to deposit.\\r\\n\\t * @param tslThreshold The initial trailing stop loss threshold as a percentage.\\r\\n\\t */\\r\\n\\tfunction deposit(\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\tuint256 tslThreshold\\r\\n\\t) external onlyManager {\\r\\n\\t\\tif (amount <= 0) {\\r\\n\\t\\t\\trevert InvalidAmount();\\r\\n\\t\\t}\\r\\n\\t\\tif (\\r\\n\\t\\t\\tstate == ContractState.Claimable || state == ContractState.Inactive\\r\\n\\t\\t) {\\r\\n\\t\\t\\trevert StrategyNotActive();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tbool transferSuccess = IERC20withDecimals(s_erc20Token).transferFrom(\\r\\n\\t\\t\\ti_manager,\\r\\n\\t\\t\\taddress(this),\\r\\n\\t\\t\\tamount\\r\\n\\t\\t);\\r\\n\\t\\tif (!transferSuccess) {\\r\\n\\t\\t\\trevert TransferFailed();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\ts_erc20Balance += amount;\\r\\n\\r\\n\\t\\tif (state == ContractState.Uninitialized) {\\r\\n\\t\\t\\t// If TSL is not active, set the threshold and activate TSL\\r\\n\\t\\t\\ts_tslThreshold = (tslThreshold * (100 - s_trailAmount)) / 100;\\r\\n\\r\\n\\t\\t\\tstate = ContractState.Active;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//store price at time of deposit\\r\\n\\t\\tuint256 currentPrice = getExactPrice();\\r\\n\\r\\n\\t\\ts_weightedEntryPrice =\\r\\n\\t\\t\\t(s_weightedEntryPrice * s_totalDeposited + currentPrice * amount) /\\r\\n\\t\\t\\t(s_totalDeposited + amount);\\r\\n\\t\\ts_totalDeposited += amount;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Withdraws the user's funds from the contract.\\r\\n\\t * @dev Allows withdrawal of either ERC20 tokens or stablecoins\\r\\n\\t */\\r\\n\\tfunction withdraw(address token) external onlyManager {\\r\\n\\t\\tuint256 withdrawalAmount;\\r\\n\\r\\n\\t\\tif (token == s_stablecoin) {\\r\\n\\t\\t\\t// Logic to handle stablecoin withdrawal\\r\\n\\t\\t\\twithdrawalAmount = s_stablecoinBalance;\\r\\n\\t\\t\\tif (withdrawalAmount <= 0) {\\r\\n\\t\\t\\t\\trevert InvalidAmount();\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\ts_stablecoinBalance = 0;\\r\\n\\t\\t\\tTransferHelper.safeTransfer(\\r\\n\\t\\t\\t\\ts_stablecoin,\\r\\n\\t\\t\\t\\ti_creator, // sends funds to the contract creator\\r\\n\\t\\t\\t\\twithdrawalAmount\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\t//deactiveate TSL\\r\\n\\t\\t\\tstate = ContractState.Inactive;\\r\\n\\t\\t} else if (token == s_erc20Token) {\\r\\n\\t\\t\\t// If TSL is active, user withdraws their ERC20 tokens\\r\\n\\t\\t\\twithdrawalAmount = s_erc20Balance;\\r\\n\\t\\t\\tif (withdrawalAmount <= 0) {\\r\\n\\t\\t\\t\\trevert InvalidAmount();\\r\\n\\t\\t\\t}\\r\\n\\t\\t\\ts_erc20Balance = 0;\\r\\n\\t\\t\\tTransferHelper.safeTransfer(\\r\\n\\t\\t\\t\\ts_erc20Token,\\r\\n\\t\\t\\t\\ti_creator,\\r\\n\\t\\t\\t\\twithdrawalAmount\\r\\n\\t\\t\\t);\\r\\n\\t\\t\\t//deactivate tsl\\r\\n\\t\\t\\tstate = ContractState.Inactive;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\trevert InvalidToken();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t//set exit price at withdrawal if not already set\\r\\n\\t\\tif (s_exitPrice == 0) {\\r\\n\\t\\t\\ts_exitPrice = getExactPrice();\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Checks if upkeep is needed based on TSL conditions.\\r\\n\\t * @return A tuple of three values: a boolean indicating if selling is needed, a boolean indicating if the threshold should be updated, and the new threshold value.\\r\\n\\t */\\r\\n\\tfunction checkUpkeepNeeded() external view returns (bool, bool, uint256) {\\r\\n\\t\\t// Implement logic to check if TSL conditions are met\\r\\n\\t\\tuint256 currentPrice = getTwapPrice();\\r\\n\\t\\tuint256 exactPrice = getExactPrice();\\r\\n\\r\\n\\t\\tbool triggerSell = false;\\r\\n\\t\\tbool updateThreshold = false;\\r\\n\\t\\tuint256 newThreshold = 0;\\r\\n\\r\\n\\t\\t// Calculate 10% price range bounds\\r\\n\\t\\tuint256 lowerBound = (currentPrice * 90) / 100;\\r\\n\\t\\tuint256 upperBound = (currentPrice * 110) / 100;\\r\\n\\t\\t//calculates the old all time high price based on the threshold\\r\\n\\t\\tuint256 oldCurrentPrice = (s_tslThreshold * 100) /\\r\\n\\t\\t\\t(100 - s_trailAmount);\\r\\n\\r\\n\\t\\t//determines the price that is granularity% higher than the old stored price\\r\\n\\t\\tuint256 minPriceForUpdate = (oldCurrentPrice * (100 + s_granularity)) /\\r\\n\\t\\t\\t100;\\r\\n\\t\\t//if new price is less than the current threshold then trigger TSL\\r\\n\\t\\tif (exactPrice >= lowerBound && exactPrice <= upperBound) {\\r\\n\\t\\t\\tif (currentPrice < s_tslThreshold) {\\r\\n\\t\\t\\t\\t//trigger TSL\\r\\n\\t\\t\\t\\ttriggerSell = true;\\r\\n\\t\\t\\t} else if (currentPrice > minPriceForUpdate) {\\r\\n\\t\\t\\t\\tupdateThreshold = true;\\r\\n\\t\\t\\t\\tnewThreshold = (currentPrice * (100 - s_trailAmount)) / 100;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\treturn (triggerSell, updateThreshold, newThreshold);\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Updates the trailing stop loss threshold.\\r\\n\\t * @dev This function is private and should be called only by performUpkeep.\\r\\n\\t * @param newThreshold The new threshold value to set.\\r\\n\\t */\\r\\n\\tfunction updateTSLThreshold(uint256 newThreshold) external onlyManager {\\r\\n\\t\\ts_tslThreshold = newThreshold;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Gets the latest price of the ERC20 token in stablecoins.\\r\\n\\t * @dev Uses the Uniswap Oracle to get the latest price using TWAP (time-weighted average price) data for the past 5 minutes\\r\\n\\t * @return The latest price of the ERC20 token in stablecoins.\\r\\n\\t */\\r\\n\\tfunction getTwapPrice() public view returns (uint256) {\\r\\n\\t\\tuint256 amountOut = s_uniswapOracle.estimateAmountOut(\\r\\n\\t\\t\\ts_uniswapPool,\\r\\n\\t\\t\\ts_erc20Token,\\r\\n\\t\\t\\t1e18, // number of decimals for erc20 token\\r\\n\\t\\t\\t300 // 5 minutes of price data (300 seconds)\\r\\n\\t\\t);\\r\\n\\t\\treturn amountOut;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getExactPrice() public view returns (uint256) {\\r\\n\\t\\tuint256 amountOut = s_uniswapOracle.estimateAmountOut(\\r\\n\\t\\t\\ts_uniswapPool,\\r\\n\\t\\t\\ts_erc20Token,\\r\\n\\t\\t\\t1e18, // number of decimals for erc20 token\\r\\n\\t\\t\\t1\\r\\n\\t\\t);\\r\\n\\t\\treturn amountOut;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Swaps the user's ERC20 tokens for stablecoins on Uniswap.\\r\\n\\t * @dev only callable by the manager contract. Non-reentrant.\\r\\n\\t * @param amount The amount of the ERC20 token to swap.\\r\\n\\t */\\r\\n\\tfunction swapOnUniswap(uint256 amount) public onlyManager nonReentrant {\\r\\n\\t\\t//swap ERC20 tokens for stablecoin on uniswap\\r\\n\\t\\t//need to approve uniswap to spend ERC20 tokens\\r\\n\\r\\n\\t\\t//gets the most up to date price to calculate slippage\\r\\n\\t\\tuint256 currentPrice = getExactPrice();\\r\\n\\t\\tuint256 minAmountOut;\\r\\n\\r\\n\\t\\tuint256 feeBps = s_poolFee; //take into account the pool fees\\r\\n\\r\\n\\t\\tif (slippageProtection) {\\r\\n\\t\\t\\tminAmountOut =\\r\\n\\t\\t\\t\\t(amount * currentPrice * (feeBps + 500)) /\\r\\n\\t\\t\\t\\t(100000 * 1e18); //99.5% of the current price (including pool fee)\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tminAmountOut = 0;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tIERC20withDecimals(s_erc20Token).approve(\\r\\n\\t\\t\\taddress(s_uniswapRouter),\\r\\n\\t\\t\\tamount\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\ts_erc20Balance -= amount;\\r\\n\\t\\tISwapRouter.ExactInputSingleParams memory params = ISwapRouter\\r\\n\\t\\t\\t.ExactInputSingleParams({\\r\\n\\t\\t\\t\\ttokenIn: s_erc20Token,\\r\\n\\t\\t\\t\\ttokenOut: s_stablecoin,\\r\\n\\t\\t\\t\\tfee: s_poolFee,\\r\\n\\t\\t\\t\\trecipient: address(this),\\r\\n\\t\\t\\t\\t// deadline: block.timestamp, NOT NEEDED FOR ROUTER ON BASE\\r\\n\\t\\t\\t\\tamountIn: amount,\\r\\n\\t\\t\\t\\tamountOutMinimum: minAmountOut,\\r\\n\\t\\t\\t\\tsqrtPriceLimitX96: 0\\r\\n\\t\\t\\t});\\r\\n\\t\\ts_uniswapRouter.exactInputSingle(params);\\r\\n\\r\\n\\t\\tuint256 amountRecieved = IERC20withDecimals(s_stablecoin).balanceOf(\\r\\n\\t\\t\\taddress(this)\\r\\n\\t\\t);\\r\\n\\t\\ts_stablecoinBalance += amountRecieved;\\r\\n\\t\\ts_exitPrice = currentPrice;\\r\\n\\t\\tstate = ContractState.Claimable;\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Activates slippage protection for token swaps.\\r\\n\\t * @dev Can only be called by the contract owner.\\r\\n\\t */\\r\\n\\tfunction toggleSlippageProtection() public onlyManager {\\r\\n\\t\\tslippageProtection = !slippageProtection;\\r\\n\\t}\\r\\n\\r\\n\\t// View functions for contract interaction and frontend integration\\r\\n\\tfunction getERC20Balance() public view returns (uint256) {\\r\\n\\t\\treturn s_erc20Balance;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getStablecoinBalance() public view returns (uint256) {\\r\\n\\t\\treturn s_stablecoinBalance;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getTSLThreshold() public view returns (uint256) {\\r\\n\\t\\treturn s_tslThreshold;\\r\\n\\t}\\r\\n\\r\\n\\t// View function to get ERC20 token address\\r\\n\\tfunction getERC20TokenAddress() public view returns (address) {\\r\\n\\t\\treturn s_erc20Token;\\r\\n\\t}\\r\\n\\r\\n\\t// View function to get stablecoin address\\r\\n\\tfunction getStablecoinAddress() public view returns (address) {\\r\\n\\t\\treturn s_stablecoin;\\r\\n\\t}\\r\\n\\r\\n\\t// View function to get Uniswap router address\\r\\n\\tfunction getUniswapRouterAddress() public view returns (address) {\\r\\n\\t\\treturn address(s_uniswapRouter);\\r\\n\\t}\\r\\n\\r\\n\\tfunction getTrailAmount() public view returns (uint256) {\\r\\n\\t\\treturn s_trailAmount;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getManager() public view returns (address) {\\r\\n\\t\\treturn i_manager;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getCreator() public view returns (address) {\\r\\n\\t\\treturn i_creator;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getGranularity() public view returns (uint256) {\\r\\n\\t\\treturn s_granularity;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getUniswapPool() public view returns (address) {\\r\\n\\t\\treturn s_uniswapPool;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getWeightedEntryPrice() public view returns (uint256) {\\r\\n\\t\\treturn s_weightedEntryPrice;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getExitPrice() public view returns (uint256) {\\r\\n\\t\\treturn s_exitPrice;\\r\\n\\t}\\r\\n\\r\\n\\tfunction getState() public view returns (string memory) {\\r\\n\\t\\tif (state == ContractState.Uninitialized) return \\\"Uninitialized\\\";\\r\\n\\t\\tif (state == ContractState.Active) return \\\"Active\\\";\\r\\n\\t\\tif (state == ContractState.Claimable) return \\\"Claimable\\\";\\r\\n\\t\\tif (state == ContractState.Inactive) return \\\"Inactive\\\";\\r\\n\\t\\treturn \\\"Unknown\\\"; // fallback in case of an unexpected state\\r\\n\\t}\\r\\n\\r\\n\\tfunction getProfit() public view returns (int256) {\\r\\n\\t\\tuint256 scalingFactor = 10 ** uint256(s_erc20TokenDecimals);\\r\\n\\r\\n\\t\\tif (state == ContractState.Active) {\\r\\n\\t\\t\\tuint256 livePrice = getExactPrice();\\r\\n\\t\\t\\tuint256 currentValue = (s_erc20Balance * livePrice) / scalingFactor;\\r\\n\\t\\t\\tuint256 totalCost = (s_totalDeposited * s_weightedEntryPrice) /\\r\\n\\t\\t\\t\\tscalingFactor;\\r\\n\\t\\t\\treturn int256(currentValue) - int256(totalCost);\\r\\n\\t\\t} else if (\\r\\n\\t\\t\\tstate == ContractState.Claimable || state == ContractState.Inactive\\r\\n\\t\\t) {\\r\\n\\t\\t\\tuint256 profit = (s_totalDeposited *\\r\\n\\t\\t\\t\\t(s_exitPrice - s_weightedEntryPrice)) / scalingFactor;\\r\\n\\t\\t\\treturn int256(profit);\\r\\n\\t\\t} else {\\r\\n\\t\\t\\treturn 0;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0xe760b1907212129cfc9f82a91a52d98c20e34890678855169cb711851a474c6e\",\"license\":\"MIT\"},\"contracts/TrailMixManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n// import {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\nerror NotContractOwner(); // Error for when the caller is not the contract owner\\r\\n\\r\\nimport { TrailMix } from \\\"./TrailMix.sol\\\"; // Import TrailMix contract\\r\\nimport { ITrailMix } from \\\"./ITrailMix.sol\\\"; // Import ITrailMix interface\\r\\n\\r\\ncontract TrailMixManager is ReentrancyGuard {\\r\\n\\t//array storing all active strategies\\r\\n\\taddress[] public activeStrategies;\\r\\n\\t// mapping to store index of strategy in activeStrategies array\\r\\n\\tmapping(address => uint256) private strategyIndex;\\r\\n\\r\\n\\t//mapping for quick lookup for if a strategy is active\\r\\n\\tmapping(address => bool) public isActiveStrategy;\\r\\n\\r\\n\\t// Mapping from user address to array of deployed TrailMix contract addresses\\r\\n\\tmapping(address => address[]) public userContracts;\\r\\n\\r\\n\\taddress private gelatoExecutor; //only address authorized to call performUpkeep\\r\\n\\r\\n\\taddress private managerDeployer; //address authorized to set gelato executor\\r\\n\\r\\n\\tmodifier onlyAuthorized() {\\r\\n\\t\\trequire(\\r\\n\\t\\t\\tmsg.sender == address(this) ||\\r\\n\\t\\t\\t\\tmsg.sender == address(gelatoExecutor),\\r\\n\\t\\t\\t\\\"Not authorized\\\"\\r\\n\\t\\t);\\r\\n\\t\\t_;\\r\\n\\t}\\r\\n\\r\\n\\t// Event to emit when a new TrailMix contract is deployed\\r\\n\\tevent ContractDeployed(\\r\\n\\t\\taddress indexed creator,\\r\\n\\t\\taddress indexed contractAddress,\\r\\n\\t\\taddress indexed token,\\r\\n\\t\\tuint256 trailAmount,\\r\\n\\t\\tuint256 timestamp\\r\\n\\t);\\r\\n\\r\\n\\tevent FundsDeposited(\\r\\n\\t\\taddress indexed creator,\\r\\n\\t\\taddress indexed strategy,\\r\\n\\t\\tuint256 depositPrice,\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\taddress token,\\r\\n\\t\\tuint256 timestamp,\\r\\n\\t\\tuint256 trailAmount\\r\\n\\t);\\r\\n\\tevent FundsWithdrawn(\\r\\n\\t\\taddress indexed creator,\\r\\n\\t\\taddress indexed strategy,\\r\\n\\t\\tuint256 amount,\\r\\n\\t\\taddress token,\\r\\n\\t\\tuint256 timestamp,\\r\\n\\t\\tuint256 trailAmount\\r\\n\\t);\\r\\n\\tevent ThresholdUpdated(\\r\\n\\t\\taddress indexed strategy,\\r\\n\\t\\tuint256 oldThreshold,\\r\\n\\t\\tuint256 newThreshold,\\r\\n\\t\\tuint256 timestamp\\r\\n\\t);\\r\\n\\tevent SwapExecuted(\\r\\n\\t\\taddress indexed strategy,\\r\\n\\t\\taddress indexed creator,\\r\\n\\t\\tuint256 amountIn,\\r\\n\\t\\tuint256 amountOut,\\r\\n\\t\\taddress tokenIn,\\r\\n\\t\\taddress tokenOut,\\r\\n\\t\\tuint256 timestamp\\r\\n\\t);\\r\\n\\r\\n\\tconstructor() {\\r\\n\\t\\tmanagerDeployer = msg.sender;\\r\\n\\t}\\r\\n\\r\\n\\t// Function to deploy a new TrailMix contract\\r\\n\\tfunction deployTrailMix(\\r\\n\\t\\taddress _erc20Token,\\r\\n\\t\\taddress _stablecoin,\\r\\n\\t\\taddress _uniswapRouter,\\r\\n\\t\\taddress _uniswapPool,\\r\\n\\t\\taddress _uniswapOracle,\\r\\n\\t\\tuint256 _trailAmount,\\r\\n\\t\\tuint256 _granularity,\\r\\n\\t\\tuint24 _poolFee\\r\\n\\t) public {\\r\\n\\t\\t// Deploy the TrailMix contract\\r\\n\\t\\tTrailMix newTrailMix = new TrailMix(\\r\\n\\t\\t\\taddress(this), // The TrailMixManager contract address\\r\\n\\t\\t\\tmsg.sender, // The user becomes the creator of the TrailMix contract\\r\\n\\t\\t\\t_erc20Token,\\r\\n\\t\\t\\t_stablecoin,\\r\\n\\t\\t\\t_uniswapRouter,\\r\\n\\t\\t\\t_uniswapPool,\\r\\n\\t\\t\\t_uniswapOracle,\\r\\n\\t\\t\\t_trailAmount,\\r\\n\\t\\t\\t_granularity,\\r\\n\\t\\t\\t_poolFee\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t// Store the contract address in the userContracts mapping\\r\\n\\t\\tuserContracts[msg.sender].push(address(newTrailMix));\\r\\n\\r\\n\\t\\t// Emit an event for the deployment\\r\\n\\t\\temit ContractDeployed(\\r\\n\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\taddress(newTrailMix),\\r\\n\\t\\t\\t_erc20Token,\\r\\n\\t\\t\\t_trailAmount,\\r\\n\\t\\t\\tblock.timestamp\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\tfunction deposit(\\r\\n\\t\\taddress _strategy,\\r\\n\\t\\tuint256 _amount,\\r\\n\\t\\tuint256 _tslThreshold\\r\\n\\t) public {\\r\\n\\t\\tif (ITrailMix(_strategy).getCreator() != msg.sender) {\\r\\n\\t\\t\\trevert NotContractOwner();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Get the ERC20 token address from the TrailMix contract\\r\\n\\t\\taddress erc20TokenAddress = ITrailMix(_strategy).getERC20TokenAddress();\\r\\n\\t\\t//transfer funds from user to the manager contract\\r\\n\\t\\tIERC20(erc20TokenAddress).transferFrom(\\r\\n\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\taddress(this),\\r\\n\\t\\t\\t_amount\\r\\n\\t\\t);\\r\\n\\r\\n\\t\\t// approve strategy to spend the funds and call deposit\\r\\n\\t\\tIERC20(erc20TokenAddress).approve(_strategy, _amount);\\r\\n\\t\\tITrailMix(_strategy).deposit(_amount, _tslThreshold);\\r\\n\\r\\n\\t\\t//if contract is not in the active array then add it to the active array\\r\\n\\t\\tif (!isActiveStrategy[address(_strategy)]) {\\r\\n\\t\\t\\tactiveStrategies.push(address(_strategy));\\r\\n\\t\\t\\tisActiveStrategy[address(_strategy)] = true;\\r\\n\\t\\t\\tstrategyIndex[address(_strategy)] = activeStrategies.length - 1;\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\t// Emit an event for the deposit\\r\\n\\t\\temit FundsDeposited(\\r\\n\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\t_strategy,\\r\\n\\t\\t\\tITrailMix(_strategy).getExactPrice(),\\r\\n\\t\\t\\t_amount,\\r\\n\\t\\t\\tITrailMix(_strategy).getERC20TokenAddress(),\\r\\n\\t\\t\\tblock.timestamp,\\r\\n\\t\\t\\tITrailMix(_strategy).getTrailAmount()\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\tfunction withdraw(address _strategy, address _token) public nonReentrant {\\r\\n\\t\\t// Withdraw the user's funds from the TrailMix contract\\r\\n\\t\\tif (ITrailMix(_strategy).getCreator() != msg.sender) {\\r\\n\\t\\t\\trevert NotContractOwner();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 amount;\\r\\n\\t\\t//fetch amount to be withdrawn\\r\\n\\t\\tif (_token == ITrailMix(_strategy).getERC20TokenAddress()) {\\r\\n\\t\\t\\tamount = ITrailMix(_strategy).getERC20Balance();\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tamount = ITrailMix(_strategy).getStablecoinBalance();\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tITrailMix(_strategy).withdraw(_token);\\r\\n\\r\\n\\t\\tif (isActiveStrategy[_strategy]) {\\r\\n\\t\\t\\tremoveStrategy(_strategy);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\temit FundsWithdrawn(\\r\\n\\t\\t\\tmsg.sender,\\r\\n\\t\\t\\t_strategy,\\r\\n\\t\\t\\tamount,\\r\\n\\t\\t\\t_token,\\r\\n\\t\\t\\tblock.timestamp,\\r\\n\\t\\t\\tITrailMix(_strategy).getTrailAmount()\\r\\n\\t\\t);\\r\\n\\t}\\r\\n\\r\\n\\tfunction toggleSlippageProtection(address _strategy) public {\\r\\n\\t\\tif (ITrailMix(_strategy).getCreator() != msg.sender) {\\r\\n\\t\\t\\trevert NotContractOwner();\\r\\n\\t\\t}\\r\\n\\t\\tITrailMix(_strategy).toggleSlippageProtection();\\r\\n\\t}\\r\\n\\r\\n\\t// Remove a strategy\\r\\n\\tfunction removeStrategy(address strategy) private {\\r\\n\\t\\trequire(strategy != address(0), \\\"Invalid address\\\");\\r\\n\\r\\n\\t\\tisActiveStrategy[strategy] = false;\\r\\n\\r\\n\\t\\t// Move the last element into the place to delete\\r\\n\\t\\tuint256 index = strategyIndex[strategy];\\r\\n\\t\\taddress lastStrategy = activeStrategies[activeStrategies.length - 1];\\r\\n\\t\\tactiveStrategies[index] = lastStrategy;\\r\\n\\t\\tstrategyIndex[lastStrategy] = index;\\r\\n\\t\\tactiveStrategies.pop();\\r\\n\\r\\n\\t\\t// Clean up\\r\\n\\t\\tdelete strategyIndex[strategy];\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Checks if upkeep is needed based on TSL conditions.COMPUTED OFF-CHAIN\\r\\n\\t * @dev Part of the Gelato automation\\r\\n\\t * @return canExec Boolean flag indicating if upkeep is needed.\\r\\n\\t * @return execPayload Encoded data on what action to perform during upkeep.\\r\\n\\t */\\r\\n\\tfunction checker()\\r\\n\\t\\texternal\\r\\n\\t\\tview\\r\\n\\t\\treturns (bool canExec, bytes memory execPayload)\\r\\n\\t{\\r\\n\\t\\tbool updateNeeded = false;\\r\\n\\t\\tbytes memory updateData;\\r\\n\\t\\tfor (uint256 i = 0; i < activeStrategies.length; i++) {\\r\\n\\t\\t\\t(bool sell, bool update, uint256 newThreshold) = ITrailMix(\\r\\n\\t\\t\\t\\tactiveStrategies[i]\\r\\n\\t\\t\\t).checkUpkeepNeeded();\\r\\n\\r\\n\\t\\t\\tif (sell) {\\r\\n\\t\\t\\t\\t// Prioritize swap action if needed\\r\\n\\t\\t\\t\\treturn (\\r\\n\\t\\t\\t\\t\\ttrue,\\r\\n\\t\\t\\t\\t\\tabi.encodeWithSelector(\\r\\n\\t\\t\\t\\t\\t\\tthis.performUpkeep.selector,\\r\\n\\t\\t\\t\\t\\t\\tactiveStrategies[i],\\r\\n\\t\\t\\t\\t\\t\\tsell,\\r\\n\\t\\t\\t\\t\\t\\tupdate,\\r\\n\\t\\t\\t\\t\\t\\tnewThreshold\\r\\n\\t\\t\\t\\t\\t)\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t\\t} else if (update) {\\r\\n\\t\\t\\t\\t// If no swap needed, check for threshold update\\r\\n\\t\\t\\t\\t// Note: This approach only encodes action for the first strategy needing an action.\\r\\n\\t\\t\\t\\tif (!updateNeeded) {\\r\\n\\t\\t\\t\\t\\tupdateNeeded = true;\\r\\n\\t\\t\\t\\t\\tupdateData = abi.encodeWithSelector(\\r\\n\\t\\t\\t\\t\\t\\tthis.performUpkeep.selector,\\r\\n\\t\\t\\t\\t\\t\\tactiveStrategies[i],\\r\\n\\t\\t\\t\\t\\t\\tsell,\\r\\n\\t\\t\\t\\t\\t\\tupdate,\\r\\n\\t\\t\\t\\t\\t\\tnewThreshold\\r\\n\\t\\t\\t\\t\\t);\\r\\n\\t\\t\\t\\t}\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tif (updateNeeded) {\\r\\n\\t\\t\\treturn (true, updateData);\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\treturn (false, \\\"\\\");\\r\\n\\t}\\r\\n\\r\\n\\t/**\\r\\n\\t * @notice Performs the upkeep of updating the stop loss threshold or triggering a sell.\\r\\n\\t * @dev Part of the gelato automation.\\r\\n\\t */\\r\\n\\tfunction performUpkeep(\\r\\n\\t\\taddress strategy,\\r\\n\\t\\tbool sell,\\r\\n\\t\\tbool updateThreshold,\\r\\n\\t\\tuint256 newThreshold\\r\\n\\t) external onlyAuthorized {\\r\\n\\t\\t_performUpkeep(strategy, sell, updateThreshold, newThreshold);\\r\\n\\t}\\r\\n\\r\\n\\tfunction _performUpkeep(\\r\\n\\t\\taddress strategy,\\r\\n\\t\\tbool sell,\\r\\n\\t\\tbool updateThreshold,\\r\\n\\t\\tuint256 newThreshold\\r\\n\\t) private {\\r\\n\\t\\t// Implement logic to perform TSL (e.g., swap to stablecoin) when conditions are met\\r\\n\\r\\n\\t\\tif (sell) {\\r\\n\\t\\t\\t//call trigger function to sell on uniswap\\r\\n\\t\\t\\tuint256 s_erc20Balance = ITrailMix(strategy).getERC20Balance();\\r\\n\\t\\t\\tITrailMix(strategy).swapOnUniswap(s_erc20Balance);\\r\\n\\r\\n\\t\\t\\t//deactivate TSL\\r\\n\\t\\t\\tif (isActiveStrategy[strategy]) {\\r\\n\\t\\t\\t\\tremoveStrategy(strategy);\\r\\n\\t\\t\\t}\\r\\n\\r\\n\\t\\t\\t//emit swap event\\r\\n\\t\\t\\temit SwapExecuted(\\r\\n\\t\\t\\t\\tstrategy,\\r\\n\\t\\t\\t\\tITrailMix(strategy).getCreator(),\\r\\n\\t\\t\\t\\ts_erc20Balance,\\r\\n\\t\\t\\t\\tITrailMix(strategy).getStablecoinBalance(),\\r\\n\\t\\t\\t\\tITrailMix(strategy).getERC20TokenAddress(),\\r\\n\\t\\t\\t\\tITrailMix(strategy).getStablecoinAddress(),\\r\\n\\t\\t\\t\\tblock.timestamp\\r\\n\\t\\t\\t);\\r\\n\\t\\t} else if (updateThreshold) {\\r\\n\\t\\t\\tuint256 oldThreshold = ITrailMix(strategy).getTSLThreshold();\\r\\n\\r\\n\\t\\t\\t//call updateThreshold function to update the threshold\\r\\n\\t\\t\\tITrailMix(strategy).updateTSLThreshold(newThreshold);\\r\\n\\t\\t\\t//emit event for threshold update\\r\\n\\t\\t\\temit ThresholdUpdated(\\r\\n\\t\\t\\t\\tstrategy,\\r\\n\\t\\t\\t\\toldThreshold,\\r\\n\\t\\t\\t\\tnewThreshold,\\r\\n\\t\\t\\t\\tblock.timestamp\\r\\n\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t// Function to get all contracts deployed by a user\\r\\n\\tfunction getUserContracts(\\r\\n\\t\\taddress user\\r\\n\\t) public view returns (address[] memory) {\\r\\n\\t\\treturn userContracts[user];\\r\\n\\t}\\r\\n\\r\\n\\tfunction setGelatoExecutor(address _executor) public {\\r\\n\\t\\t// Logic to set the Gelato executor address\\r\\n\\t\\trequire(msg.sender == managerDeployer, \\\"Not authorized\\\");\\r\\n\\t\\tgelatoExecutor = _executor;\\r\\n\\t}\\r\\n}\\r\\n\",\"keccak256\":\"0x7529559e9cb17399001f975f541ff5d7e691d245c621953ea98cab640f488093\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600055600680546001600160a01b031916331790556131f7806100376000396000f3fe60806040523480156200001157600080fd5b5060043610620000b75760003560e01c8063b789003d116200007a578063b789003d1462000162578063cf5303cf1462000179578063d25815031462000193578063f3d746f914620001ca578063f557f1a914620001e1578063f940e38514620001f857600080fd5b80630efe6a8b14620000bc57806334c925f014620000d5578063442717b21462000104578063ab2e2000146200011b578063b20b24291462000132575b600080fd5b620000d3620000cd3660046200160c565b6200020f565b005b620000ec620000e636600462001644565b620006ac565b604051620000fb91906200166b565b60405180910390f35b620000d362000115366004620016ba565b62000724565b620000d36200012c36600462001774565b62000847565b6200014962000143366004620017cc565b620008b7565b6040516001600160a01b039091168152602001620000fb565b6200014962000173366004620017e6565b620008e2565b620001836200091b565b604051620000fb92919062001815565b620001b9620001a436600462001644565b60036020526000908152604090205460ff1681565b6040519015158152602001620000fb565b620000d3620001db36600462001644565b62000b5a565b620000d3620001f236600462001644565b62000c49565b620000d3620002093660046200186f565b62000cb8565b336001600160a01b0316836001600160a01b0316630ee2cb106040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000258573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200027e9190620018ad565b6001600160a01b031614620002a65760405163bfcafd3760e01b815260040160405180910390fd5b6000836001600160a01b031663624aa0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002e7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200030d9190620018ad565b6040516323b872dd60e01b8152336004820152306024820152604481018590529091506001600160a01b038216906323b872dd906064016020604051808303816000875af115801562000364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200038a9190620018cd565b5060405163095ea7b360e01b81526001600160a01b0385811660048301526024820185905282169063095ea7b3906044016020604051808303816000875af1158015620003db573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004019190620018cd565b50604051631c57762b60e31b815260048101849052602481018390526001600160a01b0385169063e2bbb15890604401600060405180830381600087803b1580156200044c57600080fd5b505af115801562000461573d6000803e3d6000fd5b505050506001600160a01b03841660009081526003602052604090205460ff166200050d576001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0387169081179091556000908152600360205260409020805460ff1916821790558054620004f3919062001903565b6001600160a01b0385166000908152600260205260409020555b836001600160a01b0316336001600160a01b03167f54578f45afaf673149e624fe60db713945facd7062fb5d9886b8afbf09ee8133866001600160a01b0316639a31c0096040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000581573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005a791906200191f565b86886001600160a01b031663624aa0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620005e7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200060d9190620018ad565b428a6001600160a01b031663c612a8086040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200064d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200067391906200191f565b6040805195865260208601949094526001600160a01b03929092168484015260608401526080830152519081900360a00190a350505050565b6001600160a01b0381166000908152600460209081526040918290208054835181840281018401909452808452606093928301828280156200071857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620006f9575b50505050509050919050565b600030338a8a8a8a8a8a8a8a6040516200073e90620015e5565b6001600160a01b039a8b168152988a1660208a015296891660408901529488166060880152928716608087015290861660a086015290941660c084015260e083019390935261010082019290925262ffffff90911661012082015261014001604051809103906000f080158015620007ba573d6000803e3d6000fd5b5033600081815260046020908152604080832080546001810182559084529282902090920180546001600160a01b0319166001600160a01b0386811691821790925583518a815242938101939093529495508d169392917f27f210c3cfa1b3c49e3da52fd1c2be0f3ffd46ffa289b41a57477c87e54099c3910160405180910390a4505050505050505050565b333014806200086057506005546001600160a01b031633145b620008a35760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b60448201526064015b60405180910390fd5b620008b18484848462001010565b50505050565b60018181548110620008c857600080fd5b6000918252602090912001546001600160a01b0316905081565b60046020528160005260406000208181548110620008ff57600080fd5b6000918252602090912001546001600160a01b03169150829050565b600060606000606060005b60015481101562000b2b576000806000600184815481106200094c576200094c62001939565b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b031663f0b946846040518163ffffffff1660e01b8152600401606060405180830381865afa158015620009a8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009ce91906200194f565b925092509250821562000a7557600163ab2e200060e01b60018681548110620009fb57620009fb62001939565b6000918252602090912001546040516001600160a01b039091166024820152851515604482015284151560648201526084810184905260a40160408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290999098509650505050505050565b811562000b12578562000b12576001955063ab2e200060e01b6001858154811062000aa45762000aa462001939565b6000918252602090912001546040516001600160a01b039091166024820152841515604482015283151560648201526084810183905260a40160408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915294505b505050808062000b229062001997565b91505062000926565b50811562000b3e57600194909350915050565b6000604051806020016040528060008152509350935050509091565b336001600160a01b0316816001600160a01b0316630ee2cb106040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000ba3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000bc99190620018ad565b6001600160a01b03161462000bf15760405163bfcafd3760e01b815260040160405180910390fd5b806001600160a01b031663def74f916040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000c2d57600080fd5b505af115801562000c42573d6000803e3d6000fd5b5050505050565b6006546001600160a01b0316331462000c965760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b60448201526064016200089a565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b62000cc26200142d565b336001600160a01b0316826001600160a01b0316630ee2cb106040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000d0b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d319190620018ad565b6001600160a01b03161462000d595760405163bfcafd3760e01b815260040160405180910390fd5b6000826001600160a01b031663624aa0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000d9a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000dc09190620018ad565b6001600160a01b0316826001600160a01b03160362000e4657826001600160a01b031663c3736fe66040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000e18573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e3e91906200191f565b905062000eae565b826001600160a01b03166368e6ea756040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000e85573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000eab91906200191f565b90505b6040516351cff8d960e01b81526001600160a01b0383811660048301528416906351cff8d990602401600060405180830381600087803b15801562000ef257600080fd5b505af115801562000f07573d6000803e3d6000fd5b505050506001600160a01b03831660009081526003602052604090205460ff161562000f385762000f388362001488565b826001600160a01b0316336001600160a01b03167fcd2299771f9c7bc8a19e7a6b8237b9c07135d5d80ebd5dcd88d60f7212b6537a838542886001600160a01b031663c612a8086040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000faf573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fd591906200191f565b604080519485526001600160a01b03909316602085015291830152606082015260800160405180910390a3506200100c6001600055565b5050565b82156200130e576000846001600160a01b031663c3736fe66040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001058573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200107e91906200191f565b6040516353e6ce7760e11b8152600481018290529091506001600160a01b0386169063a7cd9cee90602401600060405180830381600087803b158015620010c457600080fd5b505af1158015620010d9573d6000803e3d6000fd5b505050506001600160a01b03851660009081526003602052604090205460ff16156200110a576200110a8562001488565b846001600160a01b0316630ee2cb106040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001149573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200116f9190620018ad565b6001600160a01b0316856001600160a01b03167ffe45b5432fda489a54f62aee430bcf72a5639b3174a0528dc94572338079642683886001600160a01b03166368e6ea756040518163ffffffff1660e01b8152600401602060405180830381865afa158015620011e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200120991906200191f565b896001600160a01b031663624aa0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001248573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200126e9190620018ad565b8a6001600160a01b0316637bef4f546040518163ffffffff1660e01b8152600401602060405180830381865afa158015620012ad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012d39190620018ad565b6040805194855260208501939093526001600160a01b0391821684840152166060830152426080830152519081900360a00190a350620008b1565b8115620008b1576000846001600160a01b031663f9a19e546040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001356573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200137c91906200191f565b604051632539276f60e21b8152600481018490529091506001600160a01b038616906394e49dbc90602401600060405180830381600087803b158015620013c257600080fd5b505af1158015620013d7573d6000803e3d6000fd5b50506040805184815260208101869052428183015290516001600160a01b03891693507f0bd3cc1c5d7fe612c55d1f11d85563be2fbfe6b40cb0d0361e60b07b996fbeda92509081900360600190a25050505050565b600260005403620014815760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016200089a565b6002600055565b6001600160a01b038116620014d25760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b60448201526064016200089a565b6001600160a01b0381166000908152600360209081526040808320805460ff191690556002909152812054600180549192916200151190829062001903565b8154811062001524576200152462001939565b600091825260209091200154600180546001600160a01b03909216925082918490811062001556576200155662001939565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905591831681526002909152604090208290556001805480620015a357620015a3620019b3565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03949094168152600290935250506040812055565b6117f880620019ca83390190565b6001600160a01b03811681146200160957600080fd5b50565b6000806000606084860312156200162257600080fd5b83356200162f81620015f3565b95602085013595506040909401359392505050565b6000602082840312156200165757600080fd5b81356200166481620015f3565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015620016ae5783516001600160a01b03168352928401929184019160010162001687565b50909695505050505050565b600080600080600080600080610100898b031215620016d857600080fd5b8835620016e581620015f3565b97506020890135620016f781620015f3565b965060408901356200170981620015f3565b955060608901356200171b81620015f3565b945060808901356200172d81620015f3565b935060a0890135925060c0890135915060e089013562ffffff811681146200175457600080fd5b809150509295985092959890939650565b80151581146200160957600080fd5b600080600080608085870312156200178b57600080fd5b84356200179881620015f3565b93506020850135620017aa8162001765565b92506040850135620017bc8162001765565b9396929550929360600135925050565b600060208284031215620017df57600080fd5b5035919050565b60008060408385031215620017fa57600080fd5b82356200180781620015f3565b946020939093013593505050565b821515815260006020604081840152835180604085015260005b818110156200184d578581018301518582016060015282016200182f565b506000606082860101526060601f19601f830116850101925050509392505050565b600080604083850312156200188357600080fd5b82356200189081620015f3565b91506020830135620018a281620015f3565b809150509250929050565b600060208284031215620018c057600080fd5b81516200166481620015f3565b600060208284031215620018e057600080fd5b8151620016648162001765565b634e487b7160e01b600052601160045260246000fd5b81810381811115620019195762001919620018ed565b92915050565b6000602082840312156200193257600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000806000606084860312156200196557600080fd5b8351620019728162001765565b6020850151909350620019858162001765565b80925050604084015190509250925092565b600060018201620019ac57620019ac620018ed565b5060010190565b634e487b7160e01b600052603160045260246000fdfe6101006040523480156200001257600080fd5b50604051620017f8380380620017f88339810160408190526200003591620001f3565b600160008181556001600160a01b038c81166080528b811660a05282546001600160a01b03199081168c83161784556002805482168c84161790556003805482168b841617905560048054909116888316179055871660c05260e085905260098054600886905563ffffffff191661010062ffffff86160217909217909155600d805462ff0000191662010000830217905550866001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000107573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012d9190620002bb565b600d60006101000a81548160ff021916908360ff160217905550876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000186573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001ac9190620002bb565b600d60016101000a81548160ff021916908360ff16021790555050505050505050505050620002e7565b80516001600160a01b0381168114620001ee57600080fd5b919050565b6000806000806000806000806000806101408b8d0312156200021457600080fd5b6200021f8b620001d6565b99506200022f60208c01620001d6565b98506200023f60408c01620001d6565b97506200024f60608c01620001d6565b96506200025f60808c01620001d6565b95506200026f60a08c01620001d6565b94506200027f60c08c01620001d6565b935060e08b015192506101008b015191506101208b015162ffffff81168114620002a857600080fd5b809150509295989b9194979a5092959850565b600060208284031215620002ce57600080fd5b815160ff81168114620002e057600080fd5b9392505050565b60805160a05160c05160e051611475620003836000396000818161029701528181610d4001528181610ebe0152610f620152600081816101b60152818161024e015281816107b30152610e2a01526000818161015f0152818161053101526105bb0152600081816102ce015281816104990152818161073f0152818161083b01528181610b2001528181610b7c0152610c5901526114756000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80639a31c009116100c3578063def74f911161007c578063def74f91146102f2578063e1a0f9e7146102fa578063e2bbb15814610302578063eee2bfa014610315578063f0b946841461031d578063f9a19e541461034257600080fd5b80639a31c00914610272578063a7cd9cee1461027a578063c3736fe61461028d578063c612a80814610295578063d39ac0cb146102bb578063d5009584146102cc57600080fd5b8063624aa0fd11610115578063624aa0fd14610207578063679dffb41461021857806368e6ea75146102205780637bef4f541461022857806394e49dbc14610239578063983733f01461024c57600080fd5b80630ee2cb101461015d5780631865c57d1461019c5780631966b608146101b15780634096c91c146101d857806351cff8d9146101ea5780635cdd8050146101ff575b600080fd5b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020015b60405180910390f35b6101a461034a565b604051610193919061112e565b61017f7f000000000000000000000000000000000000000000000000000000000000000081565b6008545b604051908152602001610193565b6101fd6101f8366004611161565b61048e565b005b600c546101dc565b6001546001600160a01b031661017f565b6101dc610613565b6007546101dc565b6002546001600160a01b031661017f565b6101fd61024736600461118a565b610734565b7f000000000000000000000000000000000000000000000000000000000000000061017f565b6101dc610781565b6101fd61028836600461118a565b610830565b6006546101dc565b7f00000000000000000000000000000000000000000000000000000000000000006101dc565b6003546001600160a01b031661017f565b7f000000000000000000000000000000000000000000000000000000000000000061017f565b6101fd610b15565b600a546101dc565b6101fd6103103660046111a3565b610b71565b6101dc610df9565b610325610e62565b604080519315158452911515602084015290820152606001610193565b6005546101dc565b60606000600d5462010000900460ff16600381111561036b5761036b6111c5565b03610398575060408051808201909152600d81526c155b9a5b9a5d1a585b1a5e9959609a1b602082015290565b6001600d5462010000900460ff1660038111156103b7576103b76111c5565b036103dd575060408051808201909152600681526541637469766560d01b602082015290565b6002600d5462010000900460ff1660038111156103fc576103fc6111c5565b036104255750604080518082019091526009815268436c61696d61626c6560b81b602082015290565b6003600d5462010000900460ff166003811115610444576104446111c5565b0361046c5750604080518082019091526008815267496e61637469766560c01b602082015290565b506040805180820190915260078152662ab735b737bbb760c91b602082015290565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104df5760405162461bcd60e51b81526004016104d6906111db565b60405180910390fd5b6002546000906001600160a01b039081169083160361056c57506007548061051a5760405163162908e360e11b815260040160405180910390fd5b6000600755600254610556906001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000083610fb1565b600d805462ff00001916620300001790556105f9565b6001546001600160a01b03908116908316036105e05750600654806105a45760405163162908e360e11b815260040160405180910390fd5b6000600655600154610556906001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000083610fb1565b60405163c1ab6dc160e01b815260040160405180910390fd5b600c5460000361060f5761060b610781565b600c555b5050565b600d54600090819061062e90610100900460ff16600a611316565b90506001600d5462010000900460ff16600381111561064f5761064f6111c5565b036106af57600061065e610781565b9050600082826006546106719190611322565b61067b9190611339565b9050600083600a54600b546106909190611322565b61069a9190611339565b90506106a6818361135b565b94505050505090565b6002600d5462010000900460ff1660038111156106ce576106ce6111c5565b14806106f657506003600d5462010000900460ff1660038111156106f4576106f46111c5565b145b1561072c57600081600a54600c5461070e9190611382565b600b5461071b9190611322565b6107259190611339565b9392505050565b600091505090565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461077c5760405162461bcd60e51b81526004016104d6906111db565b600555565b60048054600180546040516317f271b760e31b815260009485946001600160a01b039081169463bf938db8946107e9947f0000000000000000000000000000000000000000000000000000000000000000949190931692670de0b6b3a7640000929101611395565b602060405180830381865afa158015610806573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082a91906113d5565b92915050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108785760405162461bcd60e51b81526004016104d6906111db565b6108806110b1565b600061088a610781565b60095490915060009062ffffff6101008204169060ff16156108e25769152d02c7e14af68000006108bd826101f46113ee565b6108c78587611322565b6108d19190611322565b6108db9190611339565b91506108e7565b600091505b60015460035460405163095ea7b360e01b81526001600160a01b0391821660048201526024810187905291169063095ea7b3906044016020604051808303816000875af115801561093c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109609190611401565b5083600660008282546109739190611382565b90915550506040805160e0810182526001546001600160a01b039081168252600254811660208301908152600954610100900462ffffff9081168486019081523060608601908152608086018b815260a087018a8152600060c0890190815260035499516304e45aaf60e01b815289518916600482015296518816602488015293519094166044860152905185166064850152516084840152905160a483015251821660c4820152919216906304e45aaf9060e4016020604051808303816000875af1158015610a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6b91906113d5565b506002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad991906113d5565b90508060076000828254610aed91906113ee565b909155505050600c939093555050600d805462ff000019166202000017905550506001600055565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b5d5760405162461bcd60e51b81526004016104d6906111db565b6009805460ff19811660ff90911615179055565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bb95760405162461bcd60e51b81526004016104d6906111db565b60008211610bda5760405163162908e360e11b815260040160405180910390fd5b6002600d5462010000900460ff166003811115610bf957610bf96111c5565b1480610c2157506003600d5462010000900460ff166003811115610c1f57610c1f6111c5565b145b15610c3f57604051631b92e95360e31b815260040160405180910390fd5b6001546040516323b872dd60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301523060248301526044820185905260009216906323b872dd906064016020604051808303816000875af1158015610cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdd9190611401565b905080610cfd576040516312171d8360e31b815260040160405180910390fd5b8260066000828254610d0f91906113ee565b9091555060009050600d5462010000900460ff166003811115610d3457610d346111c5565b03610d8e576064610d657f000000000000000000000000000000000000000000000000000000000000000082611382565b610d6f9084611322565b610d799190611339565b600555600d805462ff00001916620100001790555b6000610d98610781565b905083600b54610da891906113ee565b610db28583611322565b600b54600a54610dc29190611322565b610dcc91906113ee565b610dd69190611339565b600a8190555083600b6000828254610dee91906113ee565b909155505050505050565b600480546001546040516317f271b760e31b815260009384936001600160a01b039081169363bf938db8936107e9937f00000000000000000000000000000000000000000000000000000000000000009390921691670de0b6b3a76400009161012c9101611395565b600080600080610e70610df9565b90506000610e7c610781565b905060008080806064610e9087605a611322565b610e9a9190611339565b905060006064610eab88606e611322565b610eb59190611339565b90506000610ee47f00000000000000000000000000000000000000000000000000000000000000006064611382565b600554610ef2906064611322565b610efc9190611339565b9050600060646008546064610f1191906113ee565b610f1b9084611322565b610f259190611339565b9050838810158015610f375750828811155b15610f9e57600554891015610f4f5760019650610f9e565b80891115610f9e57600195506064610f877f000000000000000000000000000000000000000000000000000000000000000082611382565b610f91908b611322565b610f9b9190611339565b94505b50949a9399509197509195505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161100d9190611423565b6000604051808303816000865af19150503d806000811461104a576040519150601f19603f3d011682016040523d82523d6000602084013e61104f565b606091505b50915091508180156110795750805115806110795750808060200190518101906110799190611401565b6110aa5760405162461bcd60e51b815260206004820152600260248201526114d560f21b60448201526064016104d6565b5050505050565b6002600054036111035760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104d6565b6002600055565b60005b8381101561112557818101518382015260200161110d565b50506000910152565b602081526000825180602084015261114d81604085016020870161110a565b601f01601f19169190910160400192915050565b60006020828403121561117357600080fd5b81356001600160a01b038116811461072557600080fd5b60006020828403121561119c57600080fd5b5035919050565b600080604083850312156111b657600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b60208082526021908201527f6f6e6c792063616c6c61626c65206279206d616e6167657220636f6e747261636040820152601d60fa1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561126d5781600019048211156112535761125361121c565b8085161561126057918102915b93841c9390800290611237565b509250929050565b6000826112845750600161082a565b816112915750600061082a565b81600181146112a757600281146112b1576112cd565b600191505061082a565b60ff8411156112c2576112c261121c565b50506001821b61082a565b5060208310610133831016604e8410600b84101617156112f0575081810a61082a565b6112fa8383611232565b806000190482111561130e5761130e61121c565b029392505050565b60006107258383611275565b808202811582820484141761082a5761082a61121c565b60008261135657634e487b7160e01b600052601260045260246000fd5b500490565b818103600083128015838313168383128216171561137b5761137b61121c565b5092915050565b8181038181111561082a5761082a61121c565b6001600160a01b0394851681529290931660208301526fffffffffffffffffffffffffffffffff16604082015263ffffffff909116606082015260800190565b6000602082840312156113e757600080fd5b5051919050565b8082018082111561082a5761082a61121c565b60006020828403121561141357600080fd5b8151801515811461072557600080fd5b6000825161143581846020870161110a565b919091019291505056fea264697066735822122015a7f70e4b76201241ce5865c43fc40ea6feb4b25b2ebcd89ee7c7619f128a0664736f6c63430008140033a264697066735822122025647bd42f36b89ae554b5d0ad8b45baeb1dabe7300c6db70ae5ddd2403b99c564736f6c63430008140033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000b75760003560e01c8063b789003d116200007a578063b789003d1462000162578063cf5303cf1462000179578063d25815031462000193578063f3d746f914620001ca578063f557f1a914620001e1578063f940e38514620001f857600080fd5b80630efe6a8b14620000bc57806334c925f014620000d5578063442717b21462000104578063ab2e2000146200011b578063b20b24291462000132575b600080fd5b620000d3620000cd3660046200160c565b6200020f565b005b620000ec620000e636600462001644565b620006ac565b604051620000fb91906200166b565b60405180910390f35b620000d362000115366004620016ba565b62000724565b620000d36200012c36600462001774565b62000847565b6200014962000143366004620017cc565b620008b7565b6040516001600160a01b039091168152602001620000fb565b6200014962000173366004620017e6565b620008e2565b620001836200091b565b604051620000fb92919062001815565b620001b9620001a436600462001644565b60036020526000908152604090205460ff1681565b6040519015158152602001620000fb565b620000d3620001db36600462001644565b62000b5a565b620000d3620001f236600462001644565b62000c49565b620000d3620002093660046200186f565b62000cb8565b336001600160a01b0316836001600160a01b0316630ee2cb106040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000258573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200027e9190620018ad565b6001600160a01b031614620002a65760405163bfcafd3760e01b815260040160405180910390fd5b6000836001600160a01b031663624aa0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002e7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200030d9190620018ad565b6040516323b872dd60e01b8152336004820152306024820152604481018590529091506001600160a01b038216906323b872dd906064016020604051808303816000875af115801562000364573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200038a9190620018cd565b5060405163095ea7b360e01b81526001600160a01b0385811660048301526024820185905282169063095ea7b3906044016020604051808303816000875af1158015620003db573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004019190620018cd565b50604051631c57762b60e31b815260048101849052602481018390526001600160a01b0385169063e2bbb15890604401600060405180830381600087803b1580156200044c57600080fd5b505af115801562000461573d6000803e3d6000fd5b505050506001600160a01b03841660009081526003602052604090205460ff166200050d576001805480820182557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b0319166001600160a01b0387169081179091556000908152600360205260409020805460ff1916821790558054620004f3919062001903565b6001600160a01b0385166000908152600260205260409020555b836001600160a01b0316336001600160a01b03167f54578f45afaf673149e624fe60db713945facd7062fb5d9886b8afbf09ee8133866001600160a01b0316639a31c0096040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000581573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005a791906200191f565b86886001600160a01b031663624aa0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620005e7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200060d9190620018ad565b428a6001600160a01b031663c612a8086040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200064d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200067391906200191f565b6040805195865260208601949094526001600160a01b03929092168484015260608401526080830152519081900360a00190a350505050565b6001600160a01b0381166000908152600460209081526040918290208054835181840281018401909452808452606093928301828280156200071857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311620006f9575b50505050509050919050565b600030338a8a8a8a8a8a8a8a6040516200073e90620015e5565b6001600160a01b039a8b168152988a1660208a015296891660408901529488166060880152928716608087015290861660a086015290941660c084015260e083019390935261010082019290925262ffffff90911661012082015261014001604051809103906000f080158015620007ba573d6000803e3d6000fd5b5033600081815260046020908152604080832080546001810182559084529282902090920180546001600160a01b0319166001600160a01b0386811691821790925583518a815242938101939093529495508d169392917f27f210c3cfa1b3c49e3da52fd1c2be0f3ffd46ffa289b41a57477c87e54099c3910160405180910390a4505050505050505050565b333014806200086057506005546001600160a01b031633145b620008a35760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b60448201526064015b60405180910390fd5b620008b18484848462001010565b50505050565b60018181548110620008c857600080fd5b6000918252602090912001546001600160a01b0316905081565b60046020528160005260406000208181548110620008ff57600080fd5b6000918252602090912001546001600160a01b03169150829050565b600060606000606060005b60015481101562000b2b576000806000600184815481106200094c576200094c62001939565b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b031663f0b946846040518163ffffffff1660e01b8152600401606060405180830381865afa158015620009a8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009ce91906200194f565b925092509250821562000a7557600163ab2e200060e01b60018681548110620009fb57620009fb62001939565b6000918252602090912001546040516001600160a01b039091166024820152851515604482015284151560648201526084810184905260a40160408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290999098509650505050505050565b811562000b12578562000b12576001955063ab2e200060e01b6001858154811062000aa45762000aa462001939565b6000918252602090912001546040516001600160a01b039091166024820152841515604482015283151560648201526084810183905260a40160408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915294505b505050808062000b229062001997565b91505062000926565b50811562000b3e57600194909350915050565b6000604051806020016040528060008152509350935050509091565b336001600160a01b0316816001600160a01b0316630ee2cb106040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000ba3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000bc99190620018ad565b6001600160a01b03161462000bf15760405163bfcafd3760e01b815260040160405180910390fd5b806001600160a01b031663def74f916040518163ffffffff1660e01b8152600401600060405180830381600087803b15801562000c2d57600080fd5b505af115801562000c42573d6000803e3d6000fd5b5050505050565b6006546001600160a01b0316331462000c965760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b60448201526064016200089a565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b62000cc26200142d565b336001600160a01b0316826001600160a01b0316630ee2cb106040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000d0b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d319190620018ad565b6001600160a01b03161462000d595760405163bfcafd3760e01b815260040160405180910390fd5b6000826001600160a01b031663624aa0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000d9a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000dc09190620018ad565b6001600160a01b0316826001600160a01b03160362000e4657826001600160a01b031663c3736fe66040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000e18573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e3e91906200191f565b905062000eae565b826001600160a01b03166368e6ea756040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000e85573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000eab91906200191f565b90505b6040516351cff8d960e01b81526001600160a01b0383811660048301528416906351cff8d990602401600060405180830381600087803b15801562000ef257600080fd5b505af115801562000f07573d6000803e3d6000fd5b505050506001600160a01b03831660009081526003602052604090205460ff161562000f385762000f388362001488565b826001600160a01b0316336001600160a01b03167fcd2299771f9c7bc8a19e7a6b8237b9c07135d5d80ebd5dcd88d60f7212b6537a838542886001600160a01b031663c612a8086040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000faf573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fd591906200191f565b604080519485526001600160a01b03909316602085015291830152606082015260800160405180910390a3506200100c6001600055565b5050565b82156200130e576000846001600160a01b031663c3736fe66040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001058573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200107e91906200191f565b6040516353e6ce7760e11b8152600481018290529091506001600160a01b0386169063a7cd9cee90602401600060405180830381600087803b158015620010c457600080fd5b505af1158015620010d9573d6000803e3d6000fd5b505050506001600160a01b03851660009081526003602052604090205460ff16156200110a576200110a8562001488565b846001600160a01b0316630ee2cb106040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001149573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200116f9190620018ad565b6001600160a01b0316856001600160a01b03167ffe45b5432fda489a54f62aee430bcf72a5639b3174a0528dc94572338079642683886001600160a01b03166368e6ea756040518163ffffffff1660e01b8152600401602060405180830381865afa158015620011e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200120991906200191f565b896001600160a01b031663624aa0fd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001248573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200126e9190620018ad565b8a6001600160a01b0316637bef4f546040518163ffffffff1660e01b8152600401602060405180830381865afa158015620012ad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012d39190620018ad565b6040805194855260208501939093526001600160a01b0391821684840152166060830152426080830152519081900360a00190a350620008b1565b8115620008b1576000846001600160a01b031663f9a19e546040518163ffffffff1660e01b8152600401602060405180830381865afa15801562001356573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200137c91906200191f565b604051632539276f60e21b8152600481018490529091506001600160a01b038616906394e49dbc90602401600060405180830381600087803b158015620013c257600080fd5b505af1158015620013d7573d6000803e3d6000fd5b50506040805184815260208101869052428183015290516001600160a01b03891693507f0bd3cc1c5d7fe612c55d1f11d85563be2fbfe6b40cb0d0361e60b07b996fbeda92509081900360600190a25050505050565b600260005403620014815760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016200089a565b6002600055565b6001600160a01b038116620014d25760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b60448201526064016200089a565b6001600160a01b0381166000908152600360209081526040808320805460ff191690556002909152812054600180549192916200151190829062001903565b8154811062001524576200152462001939565b600091825260209091200154600180546001600160a01b03909216925082918490811062001556576200155662001939565b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905591831681526002909152604090208290556001805480620015a357620015a3620019b3565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03949094168152600290935250506040812055565b6117f880620019ca83390190565b6001600160a01b03811681146200160957600080fd5b50565b6000806000606084860312156200162257600080fd5b83356200162f81620015f3565b95602085013595506040909401359392505050565b6000602082840312156200165757600080fd5b81356200166481620015f3565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015620016ae5783516001600160a01b03168352928401929184019160010162001687565b50909695505050505050565b600080600080600080600080610100898b031215620016d857600080fd5b8835620016e581620015f3565b97506020890135620016f781620015f3565b965060408901356200170981620015f3565b955060608901356200171b81620015f3565b945060808901356200172d81620015f3565b935060a0890135925060c0890135915060e089013562ffffff811681146200175457600080fd5b809150509295985092959890939650565b80151581146200160957600080fd5b600080600080608085870312156200178b57600080fd5b84356200179881620015f3565b93506020850135620017aa8162001765565b92506040850135620017bc8162001765565b9396929550929360600135925050565b600060208284031215620017df57600080fd5b5035919050565b60008060408385031215620017fa57600080fd5b82356200180781620015f3565b946020939093013593505050565b821515815260006020604081840152835180604085015260005b818110156200184d578581018301518582016060015282016200182f565b506000606082860101526060601f19601f830116850101925050509392505050565b600080604083850312156200188357600080fd5b82356200189081620015f3565b91506020830135620018a281620015f3565b809150509250929050565b600060208284031215620018c057600080fd5b81516200166481620015f3565b600060208284031215620018e057600080fd5b8151620016648162001765565b634e487b7160e01b600052601160045260246000fd5b81810381811115620019195762001919620018ed565b92915050565b6000602082840312156200193257600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b6000806000606084860312156200196557600080fd5b8351620019728162001765565b6020850151909350620019858162001765565b80925050604084015190509250925092565b600060018201620019ac57620019ac620018ed565b5060010190565b634e487b7160e01b600052603160045260246000fdfe6101006040523480156200001257600080fd5b50604051620017f8380380620017f88339810160408190526200003591620001f3565b600160008181556001600160a01b038c81166080528b811660a05282546001600160a01b03199081168c83161784556002805482168c84161790556003805482168b841617905560048054909116888316179055871660c05260e085905260098054600886905563ffffffff191661010062ffffff86160217909217909155600d805462ff0000191662010000830217905550866001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000107573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200012d9190620002bb565b600d60006101000a81548160ff021916908360ff160217905550876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000186573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001ac9190620002bb565b600d60016101000a81548160ff021916908360ff16021790555050505050505050505050620002e7565b80516001600160a01b0381168114620001ee57600080fd5b919050565b6000806000806000806000806000806101408b8d0312156200021457600080fd5b6200021f8b620001d6565b99506200022f60208c01620001d6565b98506200023f60408c01620001d6565b97506200024f60608c01620001d6565b96506200025f60808c01620001d6565b95506200026f60a08c01620001d6565b94506200027f60c08c01620001d6565b935060e08b015192506101008b015191506101208b015162ffffff81168114620002a857600080fd5b809150509295989b9194979a5092959850565b600060208284031215620002ce57600080fd5b815160ff81168114620002e057600080fd5b9392505050565b60805160a05160c05160e051611475620003836000396000818161029701528181610d4001528181610ebe0152610f620152600081816101b60152818161024e015281816107b30152610e2a01526000818161015f0152818161053101526105bb0152600081816102ce015281816104990152818161073f0152818161083b01528181610b2001528181610b7c0152610c5901526114756000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c80639a31c009116100c3578063def74f911161007c578063def74f91146102f2578063e1a0f9e7146102fa578063e2bbb15814610302578063eee2bfa014610315578063f0b946841461031d578063f9a19e541461034257600080fd5b80639a31c00914610272578063a7cd9cee1461027a578063c3736fe61461028d578063c612a80814610295578063d39ac0cb146102bb578063d5009584146102cc57600080fd5b8063624aa0fd11610115578063624aa0fd14610207578063679dffb41461021857806368e6ea75146102205780637bef4f541461022857806394e49dbc14610239578063983733f01461024c57600080fd5b80630ee2cb101461015d5780631865c57d1461019c5780631966b608146101b15780634096c91c146101d857806351cff8d9146101ea5780635cdd8050146101ff575b600080fd5b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020015b60405180910390f35b6101a461034a565b604051610193919061112e565b61017f7f000000000000000000000000000000000000000000000000000000000000000081565b6008545b604051908152602001610193565b6101fd6101f8366004611161565b61048e565b005b600c546101dc565b6001546001600160a01b031661017f565b6101dc610613565b6007546101dc565b6002546001600160a01b031661017f565b6101fd61024736600461118a565b610734565b7f000000000000000000000000000000000000000000000000000000000000000061017f565b6101dc610781565b6101fd61028836600461118a565b610830565b6006546101dc565b7f00000000000000000000000000000000000000000000000000000000000000006101dc565b6003546001600160a01b031661017f565b7f000000000000000000000000000000000000000000000000000000000000000061017f565b6101fd610b15565b600a546101dc565b6101fd6103103660046111a3565b610b71565b6101dc610df9565b610325610e62565b604080519315158452911515602084015290820152606001610193565b6005546101dc565b60606000600d5462010000900460ff16600381111561036b5761036b6111c5565b03610398575060408051808201909152600d81526c155b9a5b9a5d1a585b1a5e9959609a1b602082015290565b6001600d5462010000900460ff1660038111156103b7576103b76111c5565b036103dd575060408051808201909152600681526541637469766560d01b602082015290565b6002600d5462010000900460ff1660038111156103fc576103fc6111c5565b036104255750604080518082019091526009815268436c61696d61626c6560b81b602082015290565b6003600d5462010000900460ff166003811115610444576104446111c5565b0361046c5750604080518082019091526008815267496e61637469766560c01b602082015290565b506040805180820190915260078152662ab735b737bbb760c91b602082015290565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104df5760405162461bcd60e51b81526004016104d6906111db565b60405180910390fd5b6002546000906001600160a01b039081169083160361056c57506007548061051a5760405163162908e360e11b815260040160405180910390fd5b6000600755600254610556906001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000083610fb1565b600d805462ff00001916620300001790556105f9565b6001546001600160a01b03908116908316036105e05750600654806105a45760405163162908e360e11b815260040160405180910390fd5b6000600655600154610556906001600160a01b03167f000000000000000000000000000000000000000000000000000000000000000083610fb1565b60405163c1ab6dc160e01b815260040160405180910390fd5b600c5460000361060f5761060b610781565b600c555b5050565b600d54600090819061062e90610100900460ff16600a611316565b90506001600d5462010000900460ff16600381111561064f5761064f6111c5565b036106af57600061065e610781565b9050600082826006546106719190611322565b61067b9190611339565b9050600083600a54600b546106909190611322565b61069a9190611339565b90506106a6818361135b565b94505050505090565b6002600d5462010000900460ff1660038111156106ce576106ce6111c5565b14806106f657506003600d5462010000900460ff1660038111156106f4576106f46111c5565b145b1561072c57600081600a54600c5461070e9190611382565b600b5461071b9190611322565b6107259190611339565b9392505050565b600091505090565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461077c5760405162461bcd60e51b81526004016104d6906111db565b600555565b60048054600180546040516317f271b760e31b815260009485946001600160a01b039081169463bf938db8946107e9947f0000000000000000000000000000000000000000000000000000000000000000949190931692670de0b6b3a7640000929101611395565b602060405180830381865afa158015610806573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082a91906113d5565b92915050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108785760405162461bcd60e51b81526004016104d6906111db565b6108806110b1565b600061088a610781565b60095490915060009062ffffff6101008204169060ff16156108e25769152d02c7e14af68000006108bd826101f46113ee565b6108c78587611322565b6108d19190611322565b6108db9190611339565b91506108e7565b600091505b60015460035460405163095ea7b360e01b81526001600160a01b0391821660048201526024810187905291169063095ea7b3906044016020604051808303816000875af115801561093c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109609190611401565b5083600660008282546109739190611382565b90915550506040805160e0810182526001546001600160a01b039081168252600254811660208301908152600954610100900462ffffff9081168486019081523060608601908152608086018b815260a087018a8152600060c0890190815260035499516304e45aaf60e01b815289518916600482015296518816602488015293519094166044860152905185166064850152516084840152905160a483015251821660c4820152919216906304e45aaf9060e4016020604051808303816000875af1158015610a47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6b91906113d5565b506002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad991906113d5565b90508060076000828254610aed91906113ee565b909155505050600c939093555050600d805462ff000019166202000017905550506001600055565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b5d5760405162461bcd60e51b81526004016104d6906111db565b6009805460ff19811660ff90911615179055565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610bb95760405162461bcd60e51b81526004016104d6906111db565b60008211610bda5760405163162908e360e11b815260040160405180910390fd5b6002600d5462010000900460ff166003811115610bf957610bf96111c5565b1480610c2157506003600d5462010000900460ff166003811115610c1f57610c1f6111c5565b145b15610c3f57604051631b92e95360e31b815260040160405180910390fd5b6001546040516323b872dd60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301523060248301526044820185905260009216906323b872dd906064016020604051808303816000875af1158015610cb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdd9190611401565b905080610cfd576040516312171d8360e31b815260040160405180910390fd5b8260066000828254610d0f91906113ee565b9091555060009050600d5462010000900460ff166003811115610d3457610d346111c5565b03610d8e576064610d657f000000000000000000000000000000000000000000000000000000000000000082611382565b610d6f9084611322565b610d799190611339565b600555600d805462ff00001916620100001790555b6000610d98610781565b905083600b54610da891906113ee565b610db28583611322565b600b54600a54610dc29190611322565b610dcc91906113ee565b610dd69190611339565b600a8190555083600b6000828254610dee91906113ee565b909155505050505050565b600480546001546040516317f271b760e31b815260009384936001600160a01b039081169363bf938db8936107e9937f00000000000000000000000000000000000000000000000000000000000000009390921691670de0b6b3a76400009161012c9101611395565b600080600080610e70610df9565b90506000610e7c610781565b905060008080806064610e9087605a611322565b610e9a9190611339565b905060006064610eab88606e611322565b610eb59190611339565b90506000610ee47f00000000000000000000000000000000000000000000000000000000000000006064611382565b600554610ef2906064611322565b610efc9190611339565b9050600060646008546064610f1191906113ee565b610f1b9084611322565b610f259190611339565b9050838810158015610f375750828811155b15610f9e57600554891015610f4f5760019650610f9e565b80891115610f9e57600195506064610f877f000000000000000000000000000000000000000000000000000000000000000082611382565b610f91908b611322565b610f9b9190611339565b94505b50949a9399509197509195505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b179052915160009283929087169161100d9190611423565b6000604051808303816000865af19150503d806000811461104a576040519150601f19603f3d011682016040523d82523d6000602084013e61104f565b606091505b50915091508180156110795750805115806110795750808060200190518101906110799190611401565b6110aa5760405162461bcd60e51b815260206004820152600260248201526114d560f21b60448201526064016104d6565b5050505050565b6002600054036111035760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104d6565b6002600055565b60005b8381101561112557818101518382015260200161110d565b50506000910152565b602081526000825180602084015261114d81604085016020870161110a565b601f01601f19169190910160400192915050565b60006020828403121561117357600080fd5b81356001600160a01b038116811461072557600080fd5b60006020828403121561119c57600080fd5b5035919050565b600080604083850312156111b657600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b60208082526021908201527f6f6e6c792063616c6c61626c65206279206d616e6167657220636f6e747261636040820152601d60fa1b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561126d5781600019048211156112535761125361121c565b8085161561126057918102915b93841c9390800290611237565b509250929050565b6000826112845750600161082a565b816112915750600061082a565b81600181146112a757600281146112b1576112cd565b600191505061082a565b60ff8411156112c2576112c261121c565b50506001821b61082a565b5060208310610133831016604e8410600b84101617156112f0575081810a61082a565b6112fa8383611232565b806000190482111561130e5761130e61121c565b029392505050565b60006107258383611275565b808202811582820484141761082a5761082a61121c565b60008261135657634e487b7160e01b600052601260045260246000fd5b500490565b818103600083128015838313168383128216171561137b5761137b61121c565b5092915050565b8181038181111561082a5761082a61121c565b6001600160a01b0394851681529290931660208301526fffffffffffffffffffffffffffffffff16604082015263ffffffff909116606082015260800190565b6000602082840312156113e757600080fd5b5051919050565b8082018082111561082a5761082a61121c565b60006020828403121561141357600080fd5b8151801515811461072557600080fd5b6000825161143581846020870161110a565b919091019291505056fea264697066735822122015a7f70e4b76201241ce5865c43fc40ea6feb4b25b2ebcd89ee7c7619f128a0664736f6c63430008140033a264697066735822122025647bd42f36b89ae554b5d0ad8b45baeb1dabe7300c6db70ae5ddd2403b99c564736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checker()": {
        "details": "Part of the Gelato automation",
        "returns": {
          "canExec": "Boolean flag indicating if upkeep is needed.",
          "execPayload": "Encoded data on what action to perform during upkeep."
        }
      },
      "performUpkeep(address,bool,bool,uint256)": {
        "details": "Part of the gelato automation."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checker()": {
        "notice": "Checks if upkeep is needed based on TSL conditions.COMPUTED OFF-CHAIN"
      },
      "performUpkeep(address,bool,bool,uint256)": {
        "notice": "Performs the upkeep of updating the stop loss threshold or triggering a sell."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/TrailMixManager.sol:TrailMixManager",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1534,
        "contract": "contracts/TrailMixManager.sol:TrailMixManager",
        "label": "activeStrategies",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1538,
        "contract": "contracts/TrailMixManager.sol:TrailMixManager",
        "label": "strategyIndex",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1542,
        "contract": "contracts/TrailMixManager.sol:TrailMixManager",
        "label": "isActiveStrategy",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1547,
        "contract": "contracts/TrailMixManager.sol:TrailMixManager",
        "label": "userContracts",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 1549,
        "contract": "contracts/TrailMixManager.sol:TrailMixManager",
        "label": "gelatoExecutor",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1551,
        "contract": "contracts/TrailMixManager.sol:TrailMixManager",
        "label": "managerDeployer",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}